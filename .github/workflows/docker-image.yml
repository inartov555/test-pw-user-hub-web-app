name: Docker CI

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker/**'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'poetry.lock'
      - 'Pipfile'
      - 'Pipfile.lock'
      - 'core/**'
      - 'config/**'
      - 'pages/**'
      - 'utils/**'
      - 'tests/**'
      - '.github/workflows/docker-image.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker/**'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'poetry.lock'
      - 'Pipfile'
      - 'Pipfile.lock'
      - 'core/**'
      - 'config/**'
      - 'pages/**'
      - 'utils/**'
      - 'tests/**'
      - '.github/workflows/docker-image.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    name: Build (and Push on main/tags)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Detect changes; if nothing relevant changed, we short-circuit the rest of the steps.
      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            relevant:
              - 'Dockerfile'
              - '.dockerignore'
              - 'docker/**'
              - 'pyproject.toml'
              - 'requirements*.txt'
              - 'poetry.lock'
              - 'Pipfile'
              - 'Pipfile.lock'
              - 'core/**'
              - 'config/**'
              - 'pages/**'
              - 'utils/**'
              - 'tests/**'

      - name: No relevant changes â€” skip
        if: steps.filter.outputs.relevant != 'true'
        run: |
          echo "No Docker/app changes detected. Skipping build & push."
          exit 0

      - name: Set up Docker Buildx
        if: steps.filter.outputs.relevant == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (non-PR only)
        if: steps.filter.outputs.relevant == 'true' && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker metadata
        if: steps.filter.outputs.relevant == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # PR / CI tags
            type=ref,event=pr
            type=sha
            type=raw,value=ci
            # Branch tags (main)
            type=ref,event=branch,enable=${{ startsWith(github.ref, 'refs/heads/') }}
            # Semver tags for releases (v1.2.3 -> 1.2.3, 1.2, 1)
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build (no push on PRs)
        if: steps.filter.outputs.relevant == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
