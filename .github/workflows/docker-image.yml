name: Docker CI

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
    # Start workflow only when relevant files change
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker/**'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'poetry.lock'
      - 'Pipfile'
      - 'Pipfile.lock'
      - 'core/**'
      - 'config/**'
      - 'pages/**'
      - 'utils/**'
      - 'tests/**'
      - '.github/workflows/docker.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker/**'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'poetry.lock'
      - 'Pipfile'
      - 'Pipfile.lock'
      - 'core/**'
      - 'config/**'
      - 'pages/**'
      - 'utils/**'
      - 'tests/**'
      - '.github/workflows/docker.yml'
  workflow_dispatch:

# Cancel in-flight runs of the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Detect what changed (so we can skip builds without failing)
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.filter.outputs.docker }}
      app: ${{ steps.filter.outputs.app }}
      relevant: ${{ steps.filter.outputs.relevant }}
    steps:
      - uses: actions/checkout@v4

      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: shell
          filters: |
            docker:
              - 'Dockerfile'
              - '.dockerignore'
              - 'docker/**'
            app:
              - 'pyproject.toml'
              - 'requirements*.txt'
              - 'poetry.lock'
              - 'Pipfile'
              - 'Pipfile.lock'
              - 'core/**'
              - 'config/**'
              - 'pages/**'
              - 'utils/**'
              - 'tests/**'
            relevant:
              - 'Dockerfile'
              - '.dockerignore'
              - 'docker/**'
              - 'pyproject.toml'
              - 'requirements*.txt'
              - 'poetry.lock'
              - 'Pipfile'
              - 'Pipfile.lock'
              - 'core/**'
              - 'config/**'
              - 'pages/**'
              - 'utils/**'
              - 'tests/**'

  # Build and test only when relevant files changed
  build-test:
    name: Build (no push)
    needs: changes
    if: needs.changes.outputs.relevant == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=sha
            type=raw,value=ci

      - name: Build (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

  # Friendly “no-op” job so the workflow passes when nothing relevant changed
  no-changes:
    name: Skip (no relevant changes)
    needs: changes
    if: needs.changes.outputs.relevant != 'true'
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "No Docker/app changes detected. Skipping build and publish."
          echo "Changed sets:"
          echo "  docker:  ${{ needs.changes.outputs.docker }}"
          echo "  app:     ${{ needs.changes.outputs.app }}"

  publish:
    name: Build & Push
    needs: build-test
    runs-on: ubuntu-latest
    # only push on non-PR events AND when relevant changes exist
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag for branch commits (e.g., main)
            type=ref,event=branch,enable=${{ startsWith(github.ref, 'refs/heads/') }}
            # Semver tags for releases (v1.2.3 -> 1.2.3, 1.2, 1)
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            # Always add immutable SHA tag
            type=sha
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
