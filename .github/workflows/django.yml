name: Django CI

on:
  push:
    branches: [ "main" ]
    paths:
      - "**"
      - ".github/workflows/django.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "**"
      - ".github/workflows/django.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    env:
      PYTHONPATH: .            # make repo importable
      SECRET_KEY: ci-not-secret
      DEBUG: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f pyproject.toml ]; then
            pip install .
          else
            echo "::error::No dependency manifest found (requirements*.txt or pyproject.toml)"; exit 1
          fi
          python -c "import sys; print('Python', sys.version)"
          python -c "import importlib.util,sys; print('Django present?:', bool(importlib.util.find_spec('django')))"

      - name: Detect Django settings module
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          # Find a settings.py that looks like Django (contains INSTALLED_APPS)
          CANDIDATE="$(grep -rl --include='settings.py' 'INSTALLED_APPS' . | head -n1 || true)"
          if [ -z "${CANDIDATE:-}" ]; then
            echo "has_settings=false" >> "$GITHUB_OUTPUT"
            echo "No Django settings module found (no settings.py with INSTALLED_APPS)."
            exit 0
          fi
          # Convert file path -> module path (e.g., config/settings.py -> config.settings)
          MOD="$(python -c "import pathlib; p=pathlib.Path('${CANDIDATE}'); print('.'.join(p.with_suffix('').parts))")"
          echo "Detected settings: ${MOD}"
          echo "DJANGO_SETTINGS_MODULE=${MOD}" >> "$GITHUB_ENV"
          echo "has_settings=true" >> "$GITHUB_OUTPUT"

      - name: Verify settings import
        if: steps.detect.outputs.has_settings == 'true'
        run: |
          python -c "import os,importlib,traceback; m=os.environ['DJANGO_SETTINGS_MODULE']; print('DJANGO_SETTINGS_MODULE =', m); importlib.import_module(m); print('Imported OK')"

      - name: Django system checks
        if: steps.detect.outputs.has_settings == 'true'
        env:
          DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
        run: |
          python -m django --version
          python -m django check --deploy -v 2

      - name: Check for missing migrations
        if: steps.detect.outputs.has_settings == 'true'
        env:
          DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
        run: |
          python -m django makemigrations --check --dry-run

      - name: Migrate DB
        if: steps.detect.outputs.has_settings == 'true'
        env:
          DJANGO_SETTINGS_MODULE: ${{ env.DJANGO_SETTINGS_MODULE }}
        run: |
          python -m django migrate --noinput

      - name: Run tests
        run: |
          if python -c "import importlib.util; import sys; sys.exit(0 if importlib.util.find_spec('pytest') else 1)"; then
            pytest -q
          elif [ "${{ steps.detect.outputs.has_settings }}" = "true" ]; then
            python -m django test --noinput -v 2
          else
            echo "No pytest and no Django settings detected; nothing to run."; exit 0
          fi
